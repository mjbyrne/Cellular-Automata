#include <iostream>
using namespace std;
#define ROWS 25
#define COLUMNS 50


void printBoard(int board[ROWS][COLUMNS]) {
  for (int y = 0; y < ROWS; ++y){
    for(int x = 0; x <= COLUMNS; ++x){
      if(x == COLUMNS){
        cout << endl;
      }
      else {
        cout << board[ROWS][COLUMNS];
      }
    }
  }
}

int main(){
  
    int board[ROWS][COLUMNS];
    int a = 0;
  
    for (int y = 0; y < ROWS; ++y){
      for(int x = 0; x < COLUMNS; ++x){
        a = rand() %2;
        board[ROWS][COLUMNS]= 0; 
      }
    }
    
    
    printBoard(board);
}




/*
int neighborCount {
  int aliveNeighbors = 0;
  int neighbors[100][100];
  int neighborXPos = 0;
  int neighborYPos = 0;
  
  for (int y = 0; y < ROWS; ++y){
    for(int x = 0; x < 100; ++x){
      for(int neighborNumber = 0; neighborNumber < 8; ++neighborNumber){
        //above and left
        if (neighborNumber == 0){ 
          if (y==0){
            neighborYPos = ROWS-1;
          }
          else {
            neighborYPos = y-1;
          }
          if (x==0){
            neighborXPos = COLUMNS-1;
          }
          else{
            neighborXPos = x-1;
          }
          neighbors[y][x] +=board[neighborYPos][neighborXPos];
        }
        
        //above  
        if (neighborNumber == 1){
          if(y==0){
            neighborYPos = ROWS-1;
          }
          else {
            neighborYPos = y-1;
          }
          neighborXPos = x;
          neighbors[y][x] +=board[neighborYPos][neighborXPos];
        }
        
        //above and right
        if (neighborNumber == 2){
          if(y==ROWS-1){
            neighborYPos = 0
          }
          else{
            neighborYPos = y+1;
          }
          if(x(==COLUMNS-1){
            neighborXPos = 0;
          }
          else {
            neighborXPos = x+1;
          }
          neighbors[y][x] += board[neighborYPos][neighborXPos];
        }
        
        
        // left
        if (neighborNumber == 3){
          if(x==0){
            neighborXPos = COLUMNS-1;
          }
          else {
            neighborXPos = x-1;
          }
          neighborYPos = y;
          
          neighbors[y][x] += board[neighborYPos][neighborXPos];
        }
        
        // right
        if (neighborNumber == 4){
          if(x==COLUMNS-1){
            neighborXPos = 0;
          }
          else {
            neighborXPos = x+1;
          }
          
          neighborYPos = y;
          
          neighbors[y][x] += board[neighborYPos][neighborXPos];
          
        }
        
        //below and left
        if (neighborNumber == 5){
          if (y==ROWS-1){
            neighborYPos = 0;
          }
          else {
            neighborYPos = y-1;
          }
          if(x==0){
            neighborXPos = COLUMNS-1;
          }
          else{
            neighborXPos = x-1;
          }
          neighbors[y][x] += board[neighborYPos][neighborXPos];
          
        }
        
        // below
        if (neighborNumber == 6){
          if(y==ROWS-1){
            neighborYPos = 0;
          }
          else {
            neighborYPos = y+1;
          }
          neighborXPos = x;
          neighbors[y][x] +=board[neighborYPos][neighborXPos];
        }
        
        
        // below and right
        if (neighborNumber == 7){
          if(y==ROWS-1){
            neighborYPos = 0;
          }
          else {
            neighborYPos = y+1;
          }
          if(x==COLUMNS-1){
            neighborXPos = 0;
          }
          else {
            neighborXPos = x+1;
          }
          neighbors[y][x] +=board[neighborYPos][neighborXPos];
        }
        
      }
    }
  }
}

*/
/*  RULES
    alive cell if neighbors < 2        cell dies
    alive cell if 1 < neighbors < 4    cell stays alive
    alive cell if neighbors > 3        cell dies
    alive cell if neighbors  ==3       cell becomes alive
*/
