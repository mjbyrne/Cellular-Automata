#include <iostream>
using namespace std;
#define ROWS 15
#define COLUMNS 20


void printBoard(int board[ROWS][COLUMNS]) {
  //prints top border
  for(int i = 0; i <= COLUMNS +2; i++){
    cout << "-";
  }
  cout << endl;
  for (int y = 0; y < ROWS; ++y){
    for(int x = 0; x <= COLUMNS; ++x){

      //creates left border and first entry in line      
      if(x==0){
        cout << "|";
        if(board[y][x] ==0){
          cout << ' ';
        }
        else {
        cout << 'x';
        }
      }
      
      
      //creates right border and creates new line
      if(x == COLUMNS){
        cout << '|' << endl;
      }
      
      
      // fills in the rest of the the columns
      else {
        if(board[y][x] ==0){
          cout << ' ';
        }
        else {
        cout << 'x';
        }
      }
    }
  }
  //creates bottom border
  for(int i = 0; i <= COLUMNS +2; i++){
            cout << "-";
          }
  cout << endl << endl;
}



void nextGeneration(int board[ROWS][COLUMNS]) {
  int neighbors[ROWS][COLUMNS] = {0};
  int neighborXPos = 0;
  int neighborYPos = 0;
  
  //Create new board called neighbors and set the value of each space equal to the number of alive neighbors it has
  for (int y = 0; y < ROWS; ++y){
    for(int x = 0; x < COLUMNS; ++x){
      for(int neighborNumber = 0; neighborNumber < 8; ++neighborNumber){
        //above and left
        if (neighborNumber == 0){ 
          if (y==0){
            neighborYPos = ROWS-1;
          }
          else {
            neighborYPos = y-1;
          }
          if (x==0){
            neighborXPos = COLUMNS-1;
          }
          else{
            neighborXPos = x-1;
          }
          neighbors[y][x] +=board[neighborYPos][neighborXPos];
        }
        
        //above  
        if (neighborNumber == 1){
          if(y==0){
            neighborYPos = ROWS-1;
          }
          else {
            neighborYPos = y-1;
          }
          neighborXPos = x;
          neighbors[y][x] +=board[neighborYPos][neighborXPos];
        }
        
        //above and right
        if (neighborNumber == 2){
          if(y==0){
            neighborYPos = ROWS-1;
          }
          else{
            neighborYPos = y-1;
          }
          if(x==COLUMNS-1){
            neighborXPos = 0;
          }
          else {
            neighborXPos = x+1;
          }
          neighbors[y][x] += board[neighborYPos][neighborXPos];
        }
        
        
        // left
        if (neighborNumber == 3){
          if(x==0){
            neighborXPos = COLUMNS-1;
          }
          else {
            neighborXPos = x-1;
          }
          neighborYPos = y;
          
          neighbors[y][x] += board[neighborYPos][neighborXPos];
        }
        
        // right
        if (neighborNumber == 4){
          if(x==COLUMNS-1){
            neighborXPos = 0;
          }
          else {
            neighborXPos = x+1;
          }
          
          neighborYPos = y;
          
          neighbors[y][x] += board[neighborYPos][neighborXPos];
          
        }
        
        //below and left
        if (neighborNumber == 5){
          if (y==ROWS-1){
            neighborYPos = 0;
          }
          else {
            neighborYPos = y+1;
          }
          if(x==0){
            neighborXPos = COLUMNS-1;
          }
          else{
            neighborXPos = x-1;
          }
          neighbors[y][x] += board[neighborYPos][neighborXPos];
          
        }
        
        // below
        if (neighborNumber == 6){
          if(y==ROWS-1){
            neighborYPos = 0;
          }
          else {
            neighborYPos = y+1;
          }
          neighborXPos = x;
          neighbors[y][x] +=board[neighborYPos][neighborXPos];
        }
        
        
        // below and right
        if (neighborNumber == 7){
          if(y==ROWS-1){
            neighborYPos = 0;
          }
          else {
            neighborYPos = y+1;
          }
          if(x==COLUMNS-1){
            neighborXPos = 0;
          }
          else {
            neighborXPos = x+1;
          }
          neighbors[y][x] +=board[neighborYPos][neighborXPos];
        }
        
      }
    }
  }

  for (int y = 0; y < ROWS; ++y){
    for(int x = 0; x <= COLUMNS; ++x){
      if(board[y][x] == 1 and neighbors[y][x] < 2){
        board[y][x] = 0;
      }
      if(board[y][x] == 1 and neighbors[y][x] == 2){
        board[y][x] = 1;
      }
      if(board[y][x] == 1 and neighbors[y][x] == 3){
        board[y][x] = 1;
      }
      if(board[y][x] == 1 and neighbors[y][x] > 3){
        board[y][x] = 0;
      }
      if(board[y][x] == 0 and neighbors[y][x] == 3){
        board[y][x] = 1;
      }
    }
  }
}

//sets all values in board to 0
void clearBoard(int board[ROWS][COLUMNS]){
  for (int y = 0; y < ROWS; ++y){
    for(int x = 0; x < COLUMNS; ++x){
      board[y][x] = 0;
    }
  }
}

//Glider
void makeGlider(int board[ROWS][COLUMNS]){
    board[0][1] = 1;
    board[1][2] = 1;
    board[2][0] = 1;
    board[2][1] = 1;
    board[2][2] = 1;
}  


//Cheshire cat
void makeCheshireCat(int board[ROWS][COLUMNS]){
  board[2][5] = 1;
  board[2][8] = 1;
  
  board[3][5] = 1;
  board[3][6] = 1;
  board[3][7] = 1;
  board[3][8] = 1;
  
  board[5][6] = 1;
  board[5][7] = 1;
  
  board[4][4] = 1;
  board[5][4] = 1;
  board[6][4] = 1;
  
  board[4][9] = 1;
  board[5][9] = 1;
  board[6][9] = 1;
  
  board[7][5] = 1;
  board[7][6] = 1;
  board[7][7] = 1;
  board[7][8] = 1;
}





int main(){
  //Creates board of just zeros
  int board[ROWS][COLUMNS] = {0};
    
/*
  makeGlider(board);
  printBoard(board);
  
  for(int numOfGenerations = 0; numOfGenerations <10; numOfGenerations ++){
    nextGeneration(board);
    printBoard(board);
  }
  clearBoard(board);
*/

  makeCheshireCat(board);
  printBoard(board);
  for(int numOfGenerations = 0; numOfGenerations <10; numOfGenerations ++){
    nextGeneration(board);
    printBoard(board);
  }
  clearBoard(board);
  
  
  
}       
  
  
  


/*  RULES
    If cell is alive and has less than 2 alive neighbors, the cell dies.
    If cell is alive and has 2 or 3 live neighbors the cell stays alive.
    If cell is alive and cell has 4 or greater alive neighbors the cell dies.
    If dead cell has exactly 3 neighbors, the cell becomes alive.
*/
